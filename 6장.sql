//1.1
SET SERVEROUTPUT ON;
BEGIN
DBMS_OUTPUT.PUT_LINE('HELLO, ORACLE!');
END;
/
//1.2
DECLARE NO NUMBER(4) := 1001;
    NAME VARCHAR2(10) := '홍길동';
    HP CHAR(13) := '010-1000-1001';
    ADDR VARCHAR2(100) := '부산광역시';
    BEGIN
    DBMS_OUTPUT.PUT_LINE('번호: ' || NO);
    DBMS_OUTPUT.PUT_LINE('이름: ' || NAME);
    DBMS_OUTPUT.PUT_LINE('전화: ' || HP);
    DBMS_OUTPUT.PUT_LINE('주소: ' || ADDR);
    END;
    /
    DECLARE
NO CONSTANT NUMBER(4) := 1001;
NAME VARCHAR2(10);
HP CHAR(13) := '000-0000-0000';
AGE NUMBER(2) DEFAULT 1;
ADDR VARCHAR2(10) NOT NULL := '부산';
BEGIN
NAME := '김유신';
HP := '010-1000-1001';
DBMS_OUTPUT.PUT_LINE('번호 : ' || NO);
DBMS_OUTPUT.PUT_LINE('이름 : ' || NAME);
DBMS_OUTPUT.PUT_LINE('전화 : ' || HP);
DBMS_OUTPUT.PUT_LINE('나이 : ' || AGE);
DBMS_OUTPUT.PUT_LINE('주소 : ' || ADDR);
END;
/

DECLARE
NO DEPT.DEPTNO%TYPE;
NAME DEPT.DNAME%TYPE;
DTEL DEPT.DTEL%TYPE;
BEGIN
SELECT * INTO NO, NAME, DTEL
FROM DEPT
WHERE DEPTNO = 30;

DBMS_OUTPUT.PUT_LINE('부서번호:'|| NO);
DBMS_OUTPUT.PUT_LINE('부서명:'|| NAME);
DBMS_OUTPUT.PUT_LINE('주소:'|| DTEL);

END;
/

DECLARE
ROW_DEPT DEPT%ROWTYPE;
BEGIN      SELECT*INTO ROW_DEPT
FROM DEPT
WHERE DEPTNO= 40;

DBMS_OUTPUT.PUT_LINE('부서번호:' || ROW_DEPT.DEPTNO);
DBMS_OUTPUT.PUT_LINE('부서명:' || ROW_DEPT.DNAME);
DBMS_OUTPUT.PUT_LINE('주소:' || ROW_DEPT.DTEL);
END;
/
DECLARE
-- Record Define
TYPE REC_DEPT IS RECORD (
deptno NUMBER(2),
dname DEPT.DNAME%TYPE,
DTEL DEPT.DTEL%TYPE
);
-- Record Declare
dept_rec REC_DEPT;
BEGIN
    DEPT_REC.DEPTNO := 1;
    DEPT_REC.DNAME := '개발부';
    DEPT_REC.DTEL := '051-512-1010';
    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || DEPT_REC.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || DEPT_REC.DNAME);
    DBMS_OUTPUT.PUT_LINE('DTEL : ' || DEPT_REC.DTEL);
    
END;
/


DECLARE
TYPE ARR_CITY IS TABLE OF VARCHAR2(20) INDEX BY PLS_INTEGER;
arrCity ARR_CITY;
BEGIN
arrCity(1) := '서울';
arrCity(2) := '대전';
arrCity(3) := '대구';
DBMS_OUTPUT.PUT_LINE('arrCity(1) : ' || arrCity(1));
DBMS_OUTPUT.PUT_LINE('arrCity(2) : ' || arrCity(2));
DBMS_OUTPUT.PUT_LINE('arrCity(3) : ' || arrCity(3));
DBMS_OUTPUT.PUT_LINE('PL/SQL 종료...');
END;
/
//4.1
DECLARE
    V_DEPT_ROW DEPT%ROWTYPE;
    CURSOR c1 IS SELECT * FROM DEPT WHERE DEPTNO = 40;
BEGIN
    OPEN C1;
    FETCH C1 INTO V_DEPT_ROW;
    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || V_DEPT_ROW.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || V_DEPT_ROW.DNAME);
    DBMS_OUTPUT.PUT_LINE('DTEL : ' || V_DEPT_ROW.DTEL);
END;
/

//4.3
DECLARE
    CURSOR c1 IS SELECT * FROM DEPT;
BEGIN
FOR c1_rec IN C1 LOOP
    DBMS_OUTPUT.PUT_LINE('----------');
    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || C1_REC.DEPTNO);
    DBMS_OUTPUT.PUT_LINE('DNAME : ' || C1_REC.DNAME);
    DBMS_OUTPUT.PUT_LINE('DTEL : ' || C1_REC.DTEL);
    
END LOOP;
END;
/

DECLARE
    V_EMP_ROW EMP%ROWTYPE;
    CURSOR EMP_CURSOR IS SELECT * FROM EMP;
BEGIN
    OPEN EMP_CURSOR;
    LOOP
    
        EXIT WHEN EMP_CURSOR%NOTFOUND;
        
    DBMS_OUTPUT.PUT_LINE('------------------------------');
    DBMS_OUTPUT.PUT_LINE('DEPTNO : ' || V_EMP_ROW.EMPNO);
    DBMS_OUTPUT.PUT_LINE('NAME : ' || V_EMP_ROW.NAME);
    DBMS_OUTPUT.PUT_LINE('REGDATE : ' || V_EMP_ROW.REGDATE);    
    END LOOP;
    CLOSE EMP_CURSOR;
END;
/

//5.1 
CREATE PROCEDURE HELLO_PROCEDURE(
P_NAME IN VARCHAR2)
IS
BEGIN
    DBMS_OUTPUT.OUT_LINE('안녕하세요, ' || P_NAME || '님!');
    DBMS_OUTPUT.OUT_LINE('환영합니다.');
END;
/

//프로시저 실행
EXECUTE HELLO_PROCEDURE('홍길동');
EXECUTE hello_procedure('김철수');
DROP PROCEDURE hello_procedure;


CREATE FUNCTION GET_EMP_NAME (P_EMPNO NUMBER)RETURN VARCAHR2
IS
    V_ENAME VARCHAR2(010);
BEGIN
    SELECT ENAME
    INTO V_ENAME
    FROM EMP
    WHERE EMPNO = P_EMPNO;
    RETURN V_ENAME;
END;

SELECT get_emp_name(1001) FROM DUAL;

//5.3
--CREATE TABLE EMP_LOG(
--    LOG_DATE DATE,
--    EMPNO NUMBER,
--    ACTION VARCHAR2(10)
--    );
 CREATE TABLE EMP_LOG (
log_date DATE,
empno NUMBER,
action VARCHAR2(10)
);   
CREATE TRIGGER trgg_emp_insert
AFTER INSERT ON emp
FOR EACH ROW
BEGIN
INSERT INTO emp_log (log_date, empno, action)
VALUES (SYSDATE, :NEW.empno, 'INSERT');
END;
/

    
DROP TRIGGER trgg_emp_insert;
DROP TABLE "DYDWNS"."EMP_LOG" ;



SELECT OBJECT_NAME, OBJECT_TYPE
FROM USER_OBJECTS
WHERE OBJECT_NAME = 'trgg_emp_insert';

SELECT trgg_emp_insert, EMP_LOG, STATUS
FROM USER_TRIGGERS WHERE TRIGGER_NAME = 'trgg_emp_insert';


CREATE OR REPLACE TRIGGER trgg_emp_insert
AFTER INSERT ON emp
FOR EACH ROW
BEGIN
  INSERT INTO EMP_LOG (log_date, empno, action)
  VALUES (SYSDATE, :NEW.empno, 'INSERT');
END;
/
SELECT column_name FROM all_tab_columns WHERE table_name = 'EMP';
SELECT object_type, object_name FROM user_objects WHERE object_name = 'EMP_LOG';
INSERT INTO emp (empno, ename, sal) VALUES (9999, '테스트', 1000);
INSERT INTO EMP (log_date, empno, action) VALUES(TO_DATE('9999-01-01', 'YYYY-MM-DD'),'테스트',1000);

SELECT * FROM EMP_LOG;


CREATE TRIGGER TRGG_EMP_INSERT
AFTER INSERT ON EMP
FOR EACH ROW
BEGIN
INSERT INTO EMP_LOG (LOG_DATE, EMPNO, ACTION)
VALUES (SYSDATE, :NEW.empno, 'INSERT');
END;
/

SELECT table_name
FROM all_tables
WHERE table_name = 'EMP';

--GRANT SELECT, INSERT ON emp TO DYDWNS;
GRANT INSERT ON emp_log TO DYDWNS;
